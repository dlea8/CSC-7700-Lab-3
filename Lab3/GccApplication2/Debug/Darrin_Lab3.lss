
Darrin_Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039e4  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ac7  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad3  00000000  00000000  00006943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00007418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002186  00000000  00000000  000075a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000615  00000000  00000000  00009726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00009d3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	d7 e2       	ldi	r29, 0x27	; 39
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a7 30       	cpi	r26, 0x07	; 7
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
 21c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <haha_v3_SPIBegin>:


/* SPI Functions */
#ifdef SPI_DRIVER_H
void haha_v3_SPIBegin(void)
{
 224:	af 92       	push	r10
 226:	cf 92       	push	r12
 228:	ef 92       	push	r14
 22a:	0f 93       	push	r16
	/* Initialize SPI master on port C */
	SPI_MasterInit(&spiMasterC,
 22c:	a1 2c       	mov	r10, r1
 22e:	c1 2c       	mov	r12, r1
 230:	e1 2c       	mov	r14, r1
 232:	00 e0       	ldi	r16, 0x00	; 0
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	40 e4       	ldi	r20, 0x40	; 64
 238:	56 e0       	ldi	r21, 0x06	; 6
 23a:	60 ec       	ldi	r22, 0xC0	; 192
 23c:	78 e0       	ldi	r23, 0x08	; 8
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e2       	ldi	r25, 0x20	; 32
 242:	0e 94 3f 01 	call	0x27e	; 0x27e <SPI_MasterInit>
					false,
					SPI_MODE_0_gc,
					SPI_INTLVL_OFF_gc,
					false,
					SPI_PRESCALER_DIV4_gc);
}
 246:	0f 91       	pop	r16
 248:	ef 90       	pop	r14
 24a:	cf 90       	pop	r12
 24c:	af 90       	pop	r10
 24e:	08 95       	ret

00000250 <init_SS>:


/* Add your own function that initializes SS (HOLD_N, WP_N) ports as needed for selected SPI device. It should called before SPI operations - Example below: */

void init_SS(void)
{
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29

	// SS setup
	W25N_SS_PORT.DIRSET = W25N_SS_PIN;
 256:	c0 e4       	ldi	r28, 0x40	; 64
 258:	d6 e0       	ldi	r29, 0x06	; 6
 25a:	10 e1       	ldi	r17, 0x10	; 16
 25c:	19 83       	std	Y+1, r17	; 0x01
	W25N_SS_PORT.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 25e:	88 e3       	ldi	r24, 0x38	; 56
 260:	8c 8b       	std	Y+20, r24	; 0x14

	W25N_SS_PORT.OUTSET = W25N_SS_PIN;
 262:	1d 83       	std	Y+5, r17	; 0x05

	haha_v3_SPIBegin();	
 264:	0e 94 12 01 	call	0x224	; 0x224 <haha_v3_SPIBegin>
	
	uint8_t keyByte = 0x00;

	// writing to flash
	W25N_ss_en();
 268:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterC, keyByte);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e2       	ldi	r25, 0x20	; 32
 270:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <SPI_MasterTransceiveByte>
	W25N_ss_di();
 274:	1d 83       	std	Y+5, r17	; 0x05
	//unsigned char read_data = SPI_MasterTransceiveByte(&spiMasterC, keyByte);
	//W25N_ss_di();

	// need the .v file to send to the FPGA

}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	08 95       	ret

0000027e <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 27e:	af 92       	push	r10
 280:	cf 92       	push	r12
 282:	ef 92       	push	r14
 284:	0f 93       	push	r16
 286:	fc 01       	movw	r30, r24
 288:	60 83       	st	Z, r22
 28a:	71 83       	std	Z+1, r23	; 0x01
 28c:	42 83       	std	Z+2, r20	; 0x02
 28e:	53 83       	std	Z+3, r21	; 0x03
 290:	14 82       	std	Z+4, r1	; 0x04
 292:	cc 20       	and	r12, r12
 294:	11 f0       	breq	.+4      	; 0x29a <SPI_MasterInit+0x1c>
 296:	90 e8       	ldi	r25, 0x80	; 128
 298:	01 c0       	rjmp	.+2      	; 0x29c <SPI_MasterInit+0x1e>
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	9a 29       	or	r25, r10
 29e:	90 64       	ori	r25, 0x40	; 64
 2a0:	22 23       	and	r18, r18
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <SPI_MasterInit+0x2a>
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <SPI_MasterInit+0x2c>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	a8 2e       	mov	r10, r24
 2ac:	a9 2a       	or	r10, r25
 2ae:	0a 29       	or	r16, r10
 2b0:	00 61       	ori	r16, 0x10	; 16
 2b2:	db 01       	movw	r26, r22
 2b4:	0c 93       	st	X, r16
 2b6:	a0 81       	ld	r26, Z
 2b8:	b1 81       	ldd	r27, Z+1	; 0x01
 2ba:	11 96       	adiw	r26, 0x01	; 1
 2bc:	ec 92       	st	X, r14
 2be:	15 82       	std	Z+5, r1	; 0x05
 2c0:	16 82       	std	Z+6, r1	; 0x06
 2c2:	02 80       	ldd	r0, Z+2	; 0x02
 2c4:	f3 81       	ldd	r31, Z+3	; 0x03
 2c6:	e0 2d       	mov	r30, r0
 2c8:	80 ea       	ldi	r24, 0xA0	; 160
 2ca:	81 83       	std	Z+1, r24	; 0x01
 2cc:	0f 91       	pop	r16
 2ce:	ef 90       	pop	r14
 2d0:	cf 90       	pop	r12
 2d2:	af 90       	pop	r10
 2d4:	08 95       	ret

000002d6 <SPI_MasterTransceiveByte>:
 *  \param TXdata     Data to transmit to slave.
 *
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
 2d6:	dc 01       	movw	r26, r24
	/* Send pattern. */
	spi->module->DATA = TXdata;
 2d8:	ed 91       	ld	r30, X+
 2da:	fc 91       	ld	r31, X
 2dc:	11 97       	sbiw	r26, 0x01	; 1
 2de:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
 2e0:	ed 91       	ld	r30, X+
 2e2:	fc 91       	ld	r31, X
 2e4:	11 97       	sbiw	r26, 0x01	; 1
 2e6:	92 81       	ldd	r25, Z+2	; 0x02
 2e8:	99 23       	and	r25, r25
 2ea:	d4 f7       	brge	.-12     	; 0x2e0 <SPI_MasterTransceiveByte+0xa>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 2ec:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
 2ee:	08 95       	ret

000002f0 <main>:
#include "helper/haha_v3_xmega.h"

int main(void)
{
	
	init_SS();
 2f0:	0e 94 28 01 	call	0x250	; 0x250 <init_SS>
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <main+0x4>

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
